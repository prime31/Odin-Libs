package sdl

import "core:os"

when ODIN_OS == "windows" do foreign import lib "native/SDL2.lib";
when ODIN_OS == "linux" do foreign import lib "system:SDL2";
when ODIN_OS == "darwin" do foreign import lib "system:SDL2";

@(default_calling_convention="c")
foreign lib {
	@(link_name="SDL_AddEventWatch") add_event_watch :: proc(filter: Event_Filter, userdata: rawptr) ---;
	@(link_name="SDL_AddHintCallback") add_hint_callback :: proc(name: cstring, callback: Hint_Callback, userdata: rawptr) ---;
	@(link_name="SDL_AddTimer") add_timer :: proc(interval: u32, callback: Timer_Callback, param: rawptr) -> Timer_Id ---;
	@(link_name="SDL_AllocFormat") alloc_format :: proc(pixel_format: u32) -> ^Pixel_Format ---;
	@(link_name="SDL_AllocPalette") alloc_palette :: proc(ncolors: i32) -> ^Palette ---;
	@(link_name="SDL_AllocRW") alloc_rw :: proc() -> ^Rw_Ops ---;
	@(link_name="SDL_AtomicAdd") atomic_add :: proc(a: ^Atomic, v: i32) -> i32 ---;
	@(link_name="SDL_AtomicCAS") atomic_cas :: proc(a: ^Atomic, oldval: i32, newval: i32) -> Bool ---;
	@(link_name="SDL_AtomicCASPtr") atomic_cas_ptr :: proc(a: ^rawptr, oldval: rawptr, newval: rawptr) -> Bool ---;
	@(link_name="SDL_AtomicGet") atomic_get :: proc(a: ^Atomic) -> i32 ---;
	@(link_name="SDL_AtomicGetPtr") atomic_get_ptr :: proc(a: ^rawptr) -> rawptr ---;
	@(link_name="SDL_AtomicLock") atomic_lock :: proc(lock: ^Spin_Lock) ---;
	@(link_name="SDL_AtomicSet") atomic_set :: proc(a: ^Atomic, v: i32) -> i32 ---;
	@(link_name="SDL_AtomicSetPtr") atomic_set_ptr :: proc(a: ^rawptr, v: rawptr) -> rawptr ---;
	@(link_name="SDL_AtomicTryLock") atomic_try_lock :: proc(lock: ^Spin_Lock) -> Bool ---;
	@(link_name="SDL_AtomicUnlock") atomic_unlock :: proc(lock: ^Spin_Lock) ---;
	@(link_name="SDL_AudioInit") audio_init :: proc(driver_name: cstring) -> i32 ---;
	@(link_name="SDL_AudioQuit") audio_quit :: proc() ---;
	@(link_name="SDL_BuildAudioCVT") build_audio_cvt :: proc(cvt: ^Audio_Cvt, src_format: Audio_Format, src_channels: u8, src_rate: i32, dst_format: Audio_Format, dst_channels: u8, dst_rate: i32) -> i32 ---;
	@(link_name="SDL_CalculateGammaRamp") calculate_gamma_ramp :: proc(gamma: f32, ramp: ^u16) ---;
	@(link_name="SDL_CaptureMouse") capture_mouse :: proc(enabled: Bool) -> i32 ---;
	@(link_name="SDL_ClearError") clear_error :: proc() ---;
	@(link_name="SDL_ClearHints") clear_hints :: proc() ---;
	@(link_name="SDL_ClearQueuedAudio") clear_queued_audio :: proc(dev: Audio_Device) ---;
	@(link_name="SDL_CloseAudio") close_audio :: proc() ---;
	@(link_name="SDL_CloseAudioDevice") close_audio_device :: proc(dev: Audio_Device) ---;
	@(link_name="SDL_CondBroadcast") cond_broadcast :: proc(cond: ^Cond) -> i32 ---;
	@(link_name="SDL_CondSignal") cond_signal :: proc(cond: ^Cond) -> i32 ---;
	@(link_name="SDL_CondWait") cond_wait :: proc(cond: ^Cond, mutex: ^Mutex) -> i32 ---;
	@(link_name="SDL_CondWaitTimeout") cond_wait_timeout :: proc(cond: ^Cond, mutex: ^Mutex, ms: u32) -> i32 ---;
	@(link_name="SDL_ConvertAudio") convert_audio :: proc(cvt: ^Audio_Cvt) -> i32 ---;
	@(link_name="SDL_ConvertPixels") convert_pixels :: proc(width: i32, height: i32, src_format: u32, src: rawptr, src_pitch: i32, dst_format: u32, dst: rawptr, dst_pitch: i32) -> i32 ---;
	@(link_name="SDL_ConvertSurface") convert_surface :: proc(src: ^Surface, fmt: ^Pixel_Format, flags: u32) -> ^Surface ---;
	@(link_name="SDL_ConvertSurfaceFormat") convert_surface_format :: proc(src: ^Surface, pixel_format: u32, flags: u32) -> ^Surface ---;
	@(link_name="SDL_CreateColorCursor") create_color_cursor :: proc(surface: ^Surface, hot_x, hot_y: i32) -> ^Cursor ---;
	@(link_name="SDL_CreateCond") create_cond :: proc() -> ^Cond ---;
	@(link_name="SDL_CreateCursor") create_cursor :: proc(data: ^u8, mask: ^u8, w, h: i32, hot_x, hot_y: i32) -> ^Cursor ---;
	@(link_name="SDL_CreateMutex") create_mutex :: proc() -> ^Mutex ---;
	@(link_name="SDL_CreateRGBSurface") create_rgb_surface :: proc(flags: u32, width, height, depth: i32, Rmask, Gmask, Bmask, Amask: u32) -> ^Surface ---;
	@(link_name="SDL_CreateRGBSurfaceFrom") create_rgb_surface_from :: proc(pixels: rawptr, width, height, depth, pitch: i32, Rmask, Gmask, Bmask, Amask: u32) -> ^Surface ---;
	@(link_name="SDL_CreateRGBSurfaceWithFormat") create_rgb_surface_with_format :: proc(flags: u32, width, height, depth: i32, format: u32) -> ^Surface ---;
	@(link_name="SDL_CreateRGBSurfaceWithFormatFrom") create_rgb_surface_with_format_from :: proc(pixels: rawptr, width, height, depth, pitch: i32, format: u32) -> ^Surface ---;
	@(link_name="SDL_CreateRenderer") create_renderer :: proc(window: ^Window, index: i32, flags: Renderer_Flags) -> ^Renderer ---;
	@(link_name="SDL_CreateSemaphore") create_semaphore :: proc(initial_value: u32) -> ^Sem ---;
	@(link_name="SDL_CreateShapedWindow") create_shaped_window :: proc(title: cstring, x, y, w, h: u32, flags: Window_Flags) -> ^Window ---;
	@(link_name="SDL_CreateSoftwareRenderer") create_software_renderer :: proc(surface: ^Surface) -> ^Renderer ---;
	@(link_name="SDL_CreateSystemCursor") create_system_cursor :: proc(id: System_Cursor) -> ^Cursor ---;
	@(link_name="SDL_CreateTexture") create_texture :: proc(renderer: ^Renderer, format: u32, access: i32, w, h: i32) -> ^Texture ---;
	@(link_name="SDL_CreateTextureFromSurface") create_texture_from_surface :: proc(renderer: ^Renderer, surface: ^Surface) -> ^Texture ---;
	@(link_name="SDL_CreateThread") create_thread :: proc(fn: Thread_Function, name: cstring, data: rawptr) -> ^Thread ---;
	@(link_name="SDL_CreateWindow") create_window :: proc(title: cstring, x, y, w, h: i32, flags: Window_Flags) -> ^Window ---;
	@(link_name="SDL_CreateWindowAndRenderer") create_window_and_renderer :: proc(width, height: i32, window_flags: Window_Flags, window: ^^Window, renderer: ^^Renderer) -> i32 ---;
	@(link_name="SDL_CreateWindowFrom") create_window_from :: proc(data: rawptr) -> ^Window ---;
	@(link_name="SDL_DXGIGetOutputInfo") dxgi_get_output_info :: proc(display_index: i32, adapter_index: ^i32, output_index: ^i32) -> Bool ---;
	@(link_name="SDL_DelEventWatch") del_event_watch :: proc(filter: Event_Filter, userdata: rawptr) ---;
	@(link_name="SDL_DelHintCallback") del_hint_callback :: proc(name: cstring, callback: Hint_Callback, userdata: rawptr) ---;
	@(link_name="SDL_Delay") delay :: proc(ms: u32) ---;
	@(link_name="SDL_DequeueAudio") dequeue_audio :: proc(dev: Audio_Device_Id, data: rawptr, len: u32) -> u32 ---;
	@(link_name="SDL_DestroyCond") destroy_cond :: proc(cond: ^Cond) ---;
	@(link_name="SDL_DestroyMutex") destroy_mutex :: proc(mutex: ^Mutex) ---;
	@(link_name="SDL_DestroyRenderer") destroy_renderer :: proc(renderer: ^Renderer) ---;
	@(link_name="SDL_DestroySemaphore") destroy_semaphore :: proc(sem: ^Sem) ---;
	@(link_name="SDL_DestroyTexture") destroy_texture :: proc(texture: ^Texture) ---;
	@(link_name="SDL_DestroyWindow") destroy_window :: proc(window: ^Window) ---;
	@(link_name="SDL_DetachThread") detach_thread :: proc(thread: ^Thread) ---;
	@(link_name="SDL_Direct3D9GetAdapterIndex") direct_3d9_get_adapter_index :: proc(display_index: i32) -> i32 ---;
	@(link_name="SDL_DisableScreenSaver") disable_screen_saver :: proc() ---;
	@(link_name="SDL_EnableScreenSaver") enable_screen_saver :: proc() ---;
	@(link_name="SDL_EnclosePoints") enclose_points :: proc(points: ^Point, count: i32, clip: ^Rect, result: ^Rect) -> Bool ---;
	@(link_name="SDL_Error") error :: proc(code: Error_Code) -> i32 ---;
	@(link_name="SDL_EventState") event_state :: proc(event_type: u32, state: i32) -> u8 ---;
	@(link_name="SDL_FillRect") fill_rect :: proc(dst: ^Surface, rect: ^Rect, color: u32) -> i32 ---;
	@(link_name="SDL_FillRects") fill_rects :: proc(dst: ^Surface, rect: ^Rect, count: i32, color: u32) -> i32 ---;
	@(link_name="SDL_FilterEvents") filter_events :: proc(filter: Event_Filter, userdata: rawptr) ---;
	@(link_name="SDL_FlushEvent") flush_event :: proc(event_type: u32) ---;
	@(link_name="SDL_FlushEvents") flush_events :: proc(min_type: u32, max_type: u32) ---;
	@(link_name="SDL_FreeCursor") free_cursor :: proc(cursor: ^Cursor) ---;
	@(link_name="SDL_FreeFormat") free_format :: proc(format: ^Pixel_Format) ---;
	@(link_name="SDL_FreePalette") free_palette :: proc(palette: ^Palette) ---;
	@(link_name="SDL_FreeRW") free_rw :: proc(area: ^Rw_Ops) ---;
	@(link_name="SDL_FreeSurface") free_surface :: proc(surface: ^Surface) ---;
	@(link_name="SDL_FreeWAV") free_wav :: proc(audio_buf: ^u8) ---;
	@(link_name="SDL_GL_BindTexture") gl_bind_texture :: proc(texture: ^Texture, texw, texh: ^f32) -> i32 ---;
	@(link_name="SDL_GL_CreateContext") gl_create_context :: proc(window: ^Window) -> GL_Context ---;
	@(link_name="SDL_GL_DeleteContext") gl_delete_context :: proc(gl_context: GL_Context) ---;
	@(link_name="SDL_GL_ExtensionSupported") gl_extension_supported :: proc(extension: cstring) -> Bool ---;
	@(link_name="SDL_GL_GetAttribute") gl_get_attribute :: proc(attr: GL_Attr, value: ^i32) -> i32 ---;
	@(link_name="SDL_GL_GetCurrentContext") gl_get_current_context :: proc() -> GL_Context ---;
	@(link_name="SDL_GL_GetCurrentWindow") gl_get_current_window :: proc() -> ^Window ---;
	@(link_name="SDL_GL_GetDrawableSize") gl_get_drawable_size :: proc(window: ^Window, w, h: ^i32) ---;
	@(link_name="SDL_GL_GetProcAddress") gl_get_proc_address :: proc(name: cstring) -> rawptr ---;
	@(link_name="SDL_GL_GetSwapInterval") gl_get_swap_interval :: proc() -> i32 ---;
	@(link_name="SDL_GL_LoadLibrary") gl_load_library :: proc(path: cstring) -> i32 ---;
	@(link_name="SDL_GL_MakeCurrent") gl_make_current :: proc(window: ^Window, gl_context: GL_Context) -> i32 ---;
	@(link_name="SDL_GL_ResetAttributes") gl_reset_attributes :: proc() ---;
	@(link_name="SDL_GL_SetAttribute") gl_set_attribute :: proc(attr: GL_Attr, value: i32) -> i32 ---;
	@(link_name="SDL_GL_SetSwapInterval") gl_set_swap_interval :: proc(interval: i32) -> i32 ---;
	@(link_name="SDL_GL_SwapWindow") gl_swap_window :: proc(window: ^Window) ---;
	@(link_name="SDL_GL_UnbindTexture") gl_unbind_texture :: proc(texture: ^Texture) -> i32 ---;
	@(link_name="SDL_GL_UnloadLibrary") gl_unload_library :: proc() ---;
	@(link_name="SDL_GameControllerAddMapping") game_controller_add_mapping :: proc(mapping_string: cstring) -> i32 ---;
	@(link_name="SDL_GameControllerAddMappingsFromRW") game_controller_add_mappings_from_rw :: proc(area: ^Rw_Ops, freerw: i32) -> i32 ---;
	@(link_name="SDL_GameControllerClose") game_controller_close :: proc(game_controller: ^Game_Controller) ---;
	@(link_name="SDL_GameControllerEventState") game_controller_event_state :: proc(state: i32) -> i32 ---;
	@(link_name="SDL_GameControllerFromInstanceID") game_controller_from_instance_id :: proc(joy_id: Joystick_Id) ->	^Game_Controller ---;
	@(link_name="SDL_GameControllerGetAttached") game_controller_get_attached :: proc(game_controller: ^Game_Controller) -> Bool ---;
	@(link_name="SDL_GameControllerGetAxis") game_controller_get_axis :: proc(game_controller: ^Game_Controller, axis: Game_Controller_Axis) -> i16 ---;
	@(link_name="SDL_GameControllerGetAxisFromString") game_controller_get_axis_from_string :: proc(pch_string: cstring) -> cstring ---;
	@(link_name="SDL_GameControllerGetBindForAxis") game_controller_get_bind_for_axis :: proc(game_controller: ^Game_Controller, axis: Game_Controller_Axis) -> Game_Controller_Button_Bind ---;
	@(link_name="SDL_GameControllerGetBindForButton") game_controller_get_bind_for_button :: proc(game_controller: ^Game_Controller, button: Game_Controller_Button) -> Game_Controller_Button_Bind ---;
	@(link_name="SDL_GameControllerGetButton") game_controller_get_button :: proc(game_controller: ^Game_Controller, button: Game_Controller_Button) -> u8 ---;
	@(link_name="SDL_GameControllerGetButtonFromString") game_controller_get_button_from_string :: proc(pch_string: cstring) -> Game_Controller_Button ---;
	@(link_name="SDL_GameControllerGetJoystick") game_controller_get_joystick :: proc(game_controller: ^Game_Controller) -> ^Joystick ---;
	@(link_name="SDL_GameControllerGetStringForAxis") game_controller_get_string_for_axis :: proc(axis: Game_Controller_Axis) -> cstring ---;
	@(link_name="SDL_GameControllerGetStringForButton") game_controller_get_string_for_button :: proc(button: Game_Controller_Button) -> cstring ---;
	@(link_name="SDL_GameControllerMapping") game_controller_mapping :: proc(game_controller: ^Game_Controller) -> cstring ---;
	@(link_name="SDL_GameControllerMappingForGUID") game_controller_mapping_for_guid :: proc(guid: Joystick_Guid) -> cstring ---;
	@(link_name="SDL_GameControllerName") game_controller_name :: proc(game_controller: ^Game_Controller) -> cstring ---;
	@(link_name="SDL_GameControllerNameForIndex") game_controller_name_for_index :: proc(joystick_index: i32) -> cstring ---;
	@(link_name="SDL_GameControllerOpen") game_controller_open :: proc(joystick_index: i32) -> ^Game_Controller ---;
	@(link_name="SDL_GameControllerUpdate") game_controller_update :: proc() ---;
	@(link_name="SDL_GetAssertionHandler") get_assertion_handler :: proc(userdata: ^rawptr) -> Assertion_Handler ---;
	@(link_name="SDL_GetAssertionReport") get_assertion_report :: proc() -> ^Assert_Data ---;
	@(link_name="SDL_GetAudioDeviceName") get_audio_device_name :: proc(index: i32, iscapture: i32) -> cstring ---;
	@(link_name="SDL_GetAudioDeviceStatus") get_audio_device_status :: proc(dev: Audio_Device_Id) -> Audio_Status ---;
	@(link_name="SDL_GetAudioDriver") get_audio_driver :: proc(index: i32) -> cstring ---;
	@(link_name="SDL_GetAudioStatus") get_audio_status :: proc() -> Audio_Status ---;
	@(link_name="SDL_GetBasePath") get_base_path :: proc() -> cstring ---;
	@(link_name="SDL_GetCPUCacheLineSize") get_cpu_cache_line_size :: proc() -> i32 ---;
	@(link_name="SDL_GetCPUCount") get_cpu_count :: proc() -> i32 ---;
	@(link_name="SDL_GetClipRect") get_clip_rect :: proc(surface: ^Surface, rect: ^Rect) ---;
	@(link_name="SDL_GetClipboardText") get_clipboard_text :: proc() -> cstring ---;
	@(link_name="SDL_GetClosestDisplayMode") get_closest_display_mode :: proc(display_index: i32, mode: ^Display_Mode, closest: ^Display_Mode) -> ^Display_Mode ---;
	@(link_name="SDL_GetColorKey") get_color_key :: proc(surface: ^Surface, key: ^u32) -> i32 ---;
	@(link_name="SDL_GetCurrentAudioDriver") get_current_audio_driver :: proc() -> cstring ---;
	@(link_name="SDL_GetCurrentDisplayMode") get_current_display_mode :: proc(display_index: i32, mode: ^Display_Mode) -> i32 ---;
	@(link_name="SDL_GetCurrentVideoDriver") get_current_video_driver :: proc() -> cstring ---;
	@(link_name="SDL_GetCursor") get_cursor :: proc() -> ^Cursor ---;
	@(link_name="SDL_GetDefaultAssertionHandler") get_default_assertion_handler :: proc() -> Assertion_Handler ---;
	@(link_name="SDL_GetDefaultCursor") get_default_cursor :: proc() -> ^Cursor ---;
	@(link_name="SDL_GetDesktopDisplayMode") get_desktop_display_mode :: proc(display_index: i32, mode: ^Display_Mode) -> i32 ---;
	@(link_name="SDL_GetDisplayBounds") get_display_bounds :: proc(display_index: i32, rect: ^Rect) -> i32 ---;
	@(link_name="SDL_GetDisplayDPI") get_display_dpi :: proc(display_index: i32, ddpi, hdpi, vdpi: ^f32) -> i32 ---;
	@(link_name="SDL_GetDisplayMode") get_display_mode :: proc(display_index: i32, mode_index: i32, mode: ^Display_Mode) -> i32 ---;
	@(link_name="SDL_GetDisplayName") get_display_name :: proc(display_index: i32) -> cstring ---;
	@(link_name="SDL_GetDisplayUsableBounds") get_display_usable_bounds :: proc(display_index: i32, rect: ^Rect) -> i32 ---;
	@(link_name="SDL_GetError") get_error :: proc() -> cstring ---;
	@(link_name="SDL_GetEventFilter") get_event_filter :: proc(filter: ^Event_Filter, userdata: ^rawptr) -> Bool ---;
	@(link_name="SDL_GetGlobalMouseState") get_global_mouse_state :: proc(x, y: ^i32) -> u32 ---;
	@(link_name="SDL_GetGrabbedWindow") get_grabbed_window :: proc() -> ^Window ---;
	@(link_name="SDL_GetHint") get_hint :: proc(name: cstring) -> cstring ---;
	@(link_name="SDL_GetHintBoolean") get_hint_boolean :: proc(name: cstring, default_value: Bool) -> Bool ---;
	@(link_name="SDL_GetKeyFromName") get_key_from_name :: proc(name: cstring) -> Keycode ---;
	@(link_name="SDL_GetKeyFromScancode") get_key_from_scancode :: proc(scancode: Scancode) -> Keycode ---;
	@(link_name="SDL_GetKeyName") get_key_name :: proc(key: Keycode) -> cstring ---;
	@(link_name="SDL_GetKeyboardFocus") get_keyboard_focus :: proc() -> ^Window ---;
	@(link_name="SDL_GetKeyboardState") get_keyboard_state :: proc(numkeys: ^i32) -> ^u8 ---;
	@(link_name="SDL_GetModState") get_mod_state :: proc() -> Keymod ---;
	@(link_name="SDL_GetMouseFocus") get_mouse_focus :: proc() -> ^Window ---;
	@(link_name="SDL_GetMouseState") get_mouse_state :: proc(x, y: ^i32) -> u32 ---;
	@(link_name="SDL_GetNumAudioDevices") get_num_audio_devices :: proc(iscapture: i32) -> i32 ---;
	@(link_name="SDL_GetNumAudioDrivers") get_num_audio_drivers :: proc() -> i32 ---;
	@(link_name="SDL_GetNumDisplayModes") get_num_display_modes :: proc(display_index: i32) -> i32 ---;
	@(link_name="SDL_GetNumRenderDrivers") get_num_render_drivers :: proc() -> i32 ---;
	@(link_name="SDL_GetNumTouchDevices") get_num_touch_devices :: proc() -> i32 ---;
	@(link_name="SDL_GetNumTouchFingers") get_num_touch_fingers :: proc(touch_id: Touch_Id) -> i32 ---;
	@(link_name="SDL_GetNumVideoDisplays") get_num_video_displays :: proc() -> i32 ---;
	@(link_name="SDL_GetNumVideoDrivers") get_num_video_drivers :: proc() -> i32 ---;
	@(link_name="SDL_GetPerformanceCounter") get_performance_counter :: proc() -> u64 ---;
	@(link_name="SDL_GetPerformanceFrequency") get_performance_frequency :: proc() -> u64 ---;
	@(link_name="SDL_GetPixelFormatName") get_pixel_format_name :: proc(format: u32) -> cstring ---;
	@(link_name="SDL_GetPlatform") get_platform :: proc() -> cstring ---;
	@(link_name="SDL_GetPowerInfo") get_power_info :: proc(secs, pct: ^i32) -> Power_State ---;
	@(link_name="SDL_GetPrefPath") get_pref_path :: proc(org, app: cstring) -> cstring ---;
	@(link_name="SDL_GetQueuedAudioSize") get_queued_audio_size :: proc(dev: Audio_Device_Id) -> u32 ---;
	@(link_name="SDL_GetRGB") get_rgb :: proc(pixel: u32, format: ^Pixel_Format, r, g, b: ^u8) ---;
	@(link_name="SDL_GetRGBA") get_rgba :: proc(pixel: u32, format: ^Pixel_Format, r, g, b, a: ^u8) ---;
	@(link_name="SDL_GetRelativeMouseMode") get_relative_mouse_mode :: proc() -> Bool ---;
	@(link_name="SDL_GetRelativeMouseState") get_relative_mouse_state :: proc(x, y: ^i32) -> u32 ---;
	@(link_name="SDL_GetRenderDrawBlendMode") get_render_draw_blend_mode :: proc(renderer: ^Renderer, blend_mode: ^Blend_Mode) -> i32 ---;
	@(link_name="SDL_GetRenderDrawColor") get_render_draw_color :: proc(renderer: ^Renderer, r, g, b, a: ^u8) -> i32 ---;
	@(link_name="SDL_GetRenderDriverInfo") get_render_driver_info :: proc(index: i32, info: ^Renderer_Info) -> i32 ---;
	@(link_name="SDL_GetRenderTarget") get_render_target :: proc(renderer: ^Renderer) -> ^Texture ---;
	@(link_name="SDL_GetRenderer") get_renderer :: proc(window: ^Window) -> ^Renderer ---;
	@(link_name="SDL_GetRendererInfo") get_renderer_info :: proc(renderer: ^Renderer, info: ^Renderer_Info) -> i32 ---;
	@(link_name="SDL_GetRendererOutputSize") get_renderer_output_size :: proc(renderer: ^Renderer, w, h: ^i32) -> i32 ---;
	@(link_name="SDL_GetRevision") get_revision :: proc() -> cstring ---;
	@(link_name="SDL_GetRevisionNumber") get_revision_number :: proc() -> i32 ---;
	@(link_name="SDL_GetScancodeFromKey") get_scancode_from_key :: proc(key: Keycode) -> Scancode ---;
	@(link_name="SDL_GetScancodeFromName") get_scancode_from_name :: proc(name: cstring) -> Scancode ---;
	@(link_name="SDL_GetScancodeName") get_scancode_name :: proc(scancode: Scancode) -> cstring ---;
	@(link_name="SDL_GetShapedWindowMode") get_shaped_window_mode :: proc(window: ^Window, shape_mode: ^Window_Shape_Mode) -> i32 ---;
	@(link_name="SDL_GetSurfaceAlphaMod") get_surface_alpha_mod :: proc(surface: ^Surface, alpha: ^u8) -> i32 ---;
	@(link_name="SDL_GetSurfaceBlendMode") get_surface_blend_mode :: proc(surface: ^Surface, blend_mode: ^Blend_Mode) -> i32 ---;
	@(link_name="SDL_GetSurfaceColorMod") get_surface_color_mod :: proc(surface: ^Surface, r, g, b: ^u8) -> i32 ---;
	@(link_name="SDL_GetSystemRAM") get_system_ram :: proc() -> i32 ---;
	@(link_name="SDL_GetTextureAlphaMod") get_texture_alpha_mod :: proc(texture: ^Texture, alpha: ^u8) -> i32 ---;
	@(link_name="SDL_GetTextureBlendMode") get_texture_blend_mode :: proc(texture: ^Texture, blend_mode: ^Blend_Mode) -> i32 ---;
	@(link_name="SDL_GetTextureColorMod") get_texture_color_mod :: proc(texture: ^Texture, r, g, b: ^u8) -> i32 ---;
	@(link_name="SDL_GetThreadID") get_thread_id :: proc(thread: ^Thread) -> Thread_Id ---;
	@(link_name="SDL_GetThreadName") get_thread_name :: proc(thread: ^Thread) -> cstring ---;
	@(link_name="SDL_GetTicks") get_ticks :: proc() -> u32 ---;
	@(link_name="SDL_GetTouchDevice") get_touch_device :: proc(index: i32) -> Touch_Id ---;
	@(link_name="SDL_GetTouchFinger") get_touch_finger :: proc(touch_id: Touch_Id, index: i32) -> ^Finger ---;
	@(link_name="SDL_GetVersion") get_version :: proc(ver: ^Version) ---;
	@(link_name="SDL_GetVideoDriver") get_video_driver :: proc(index: i32) -> cstring ---;
	@(link_name="SDL_GetWindowBordersSize") get_window_borders_size :: proc(window: ^Window, top, left, bottom, right: ^i32) -> i32 ---;
	@(link_name="SDL_GetWindowBrightness") get_window_brightness :: proc(window: ^Window) -> f32 ---;
	@(link_name="SDL_GetWindowData") get_window_data :: proc(window: ^Window, name: cstring) -> rawptr ---;
	@(link_name="SDL_GetWindowDisplayIndex") get_window_display_index :: proc(window: ^Window) -> i32 ---;
	@(link_name="SDL_GetWindowDisplayMode") get_window_display_mode :: proc(window: ^Window, mode: ^Display_Mode) -> i32 ---;
	@(link_name="SDL_GetWindowFlags") get_window_flags :: proc(window: ^Window) -> u32 ---;
	@(link_name="SDL_GetWindowFromID") get_window_fromid :: proc(id: u32) -> ^Window ---;
	@(link_name="SDL_GetWindowGammaRamp") get_window_gammaramp :: proc(window: ^Window, r, g, b: u16) -> i32 ---;
	@(link_name="SDL_GetWindowGrab") get_window_grab :: proc(window: ^Window) -> Bool ---;
	@(link_name="SDL_GetWindowID") get_window_id :: proc(window: ^Window) -> u32 ---;
	@(link_name="SDL_GetWindowMaximumSize") get_window_maximum_size :: proc(window: ^Window, w, h: ^i32) ---;
	@(link_name="SDL_GetWindowMinimumSize") get_window_minimum_size :: proc(window: ^Window, w, h: ^i32) ---;
	@(link_name="SDL_GetWindowOpacity") get_window_opacity :: proc(window: ^Window, opacity: ^f32) -> i32 ---;
	@(link_name="SDL_GetWindowPixelFormat") get_window_pixel_format :: proc(window: ^Window) -> u32 ---;
	@(link_name="SDL_GetWindowPosition") get_window_position :: proc(window: ^Window, x, y: ^i32) ---;
	@(link_name="SDL_GetWindowSize") get_window_size :: proc(window: ^Window, w, h: ^i32) ---;
	@(link_name="SDL_GetWindowSurface") get_window_surface :: proc(window: ^Window) -> ^Surface ---;
	@(link_name="SDL_GetWindowTitle") get_window_title :: proc(window: ^Window) -> cstring ---;
	@(link_name="SDL_GetWindowWMInfo") get_window_wm_info :: proc(window: ^Window, info: ^Sys_Wm_Info) -> Bool ---;
	@(link_name="SDL_HapticClose") haptic_close :: proc(haptic: ^Haptic) ---;
	@(link_name="SDL_HapticDestroyEffect") haptic_destroy_effect :: proc(haptic: ^Haptic, effect: i32) ---;
	@(link_name="SDL_HapticEffectSupported") haptic_effect_supported :: proc(haptic: ^Haptic, effect: ^Haptic_Effect) -> i32 ---;
	@(link_name="SDL_HapticGetEffectStatus") haptic_get_effect_status :: proc(haptic: ^Haptic, effect: i32) -> i32 ---;
	@(link_name="SDL_HapticIndex") haptic_index :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticName") haptic_name :: proc(device_index: i32) -> cstring ---;
	@(link_name="SDL_HapticNewEffect") haptic_new_effect :: proc(haptic: ^Haptic, effect: ^Haptic_Effect) -> i32 ---;
	@(link_name="SDL_HapticNumAxes") haptic_num_axes :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticNumEffects") haptic_num_effects :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticNumEffectsPlaying") haptic_num_effects_playing :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticOpen") haptic_open :: proc(device_index: i32) -> ^Haptic ---;
	@(link_name="SDL_HapticOpenFromJoystick") haptic_open_from_joystick :: proc(joystick: ^Joystick) -> ^Haptic ---;
	@(link_name="SDL_HapticOpenFromMouse") haptic_open_from_mouse :: proc() -> ^Haptic ---;
	@(link_name="SDL_HapticOpened") haptic_opened :: proc(device_index: i32) -> i32 ---;
	@(link_name="SDL_HapticPause") haptic_pause :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticQuery") haptic_query :: proc(haptic: ^Haptic) ->	u32 ---;
	@(link_name="SDL_HapticRumbleInit") haptic_rumble_init :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticRumblePlay") haptic_rumble_play :: proc(haptic: ^Haptic, strength: f32, length: u32) -> i32 ---;
	@(link_name="SDL_HapticRumbleStop") haptic_rumble_stop :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticRumbleSupported") haptic_rumble_supported :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticRunEffect") haptic_run_effect :: proc(haptic: ^Haptic, effect: i32, iterations: u32) -> i32 ---;
	@(link_name="SDL_HapticSetAutocenter") haptic_set_autocenter :: proc(haptic: ^Haptic, autocenter: i32) -> i32 ---;
	@(link_name="SDL_HapticSetGain") haptic_set_gain :: proc(haptic: ^Haptic, gain: i32) -> i32 ---;
	@(link_name="SDL_HapticStopAll") haptic_stop_all :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticStopEffect") haptic_stop_effect :: proc(haptic: ^Haptic, effect: i32) -> i32 ---;
	@(link_name="SDL_HapticUnpause") haptic_unpause :: proc(haptic: ^Haptic) -> i32 ---;
	@(link_name="SDL_HapticUpdateEffect") haptic_update_effect :: proc(haptic: ^Haptic, effect: i32, data: ^Haptic_Effect) -> i32 ---;
	@(link_name="SDL_Has3DNow") has_3d_now :: proc() -> Bool ---;
	@(link_name="SDL_HasAVX") has_avx :: proc() -> Bool ---;
	@(link_name="SDL_HasAVX2") has_avx2 :: proc() -> Bool ---;
	@(link_name="SDL_HasAltiVec") has_alti_vec :: proc() -> Bool ---;
	@(link_name="SDL_HasClipboardText") has_clipboard_text :: proc() -> Bool ---;
	@(link_name="SDL_HasEvent") has_event :: proc(event_type: u32) -> Bool ---;
	@(link_name="SDL_HasEvents") has_events :: proc(min_type: u32, max_type: u32) -> Bool ---;
	@(link_name="SDL_HasIntersection") has_intersection :: proc(a, b: ^Rect) -> Bool ---;
	@(link_name="SDL_HasMMX") has_mmx :: proc() -> Bool ---;
	@(link_name="SDL_HasRDTSC") has_rdtsc :: proc() -> Bool ---;
	@(link_name="SDL_HasSSE") has_sse :: proc() -> Bool ---;
	@(link_name="SDL_HasSSE2") has_sse2 :: proc() -> Bool ---;
	@(link_name="SDL_HasSSE3") has_sse3 :: proc() -> Bool ---;
	@(link_name="SDL_HasSSE41") has_sse41 :: proc() -> Bool ---;
	@(link_name="SDL_HasSSE42") has_sse42 :: proc() -> Bool ---;
	@(link_name="SDL_HasScreenKeyboardSupport") has_screen_keyboard_support :: proc() -> Bool ---;
	@(link_name="SDL_HideWindow") hide_window :: proc(window: ^Window) ---;
	@(link_name="SDL_Init") init :: proc(flags: Init_Flags) -> i32 ---;
	@(link_name="SDL_InitSubSystem") init_sub_system :: proc(flags: u32) -> i32 ---;
	@(link_name="SDL_IntersectRect") intersect_rect :: proc(a, b, result: ^Rect) -> Bool ---;
	@(link_name="SDL_IntersectRectAndLine") intersect_rect_and_line :: proc(rect: ^Rect, x1, y1, x2, y2: ^i32) -> Bool ---;
	@(link_name="SDL_IsGameController") is_game_controller :: proc(joystick_index: i32) -> Bool ---;
	@(link_name="SDL_IsScreenKeyboardShown") is_screen_keyboard_shown :: proc(window: ^Window) -> Bool ---;
	@(link_name="SDL_IsScreenSaverEnabled") is_screen_saver_enabled :: proc() -> Bool ---;
	@(link_name="SDL_IsShapedWindow") is_shaped_window :: proc(window: Window) -> Bool ---;
	@(link_name="SDL_IsTextInputActive") is_text_input_active :: proc() -> Bool ---;
	@(link_name="SDL_JoystickClose") joystick_close :: proc(joystick: ^Joystick) ---;
	@(link_name="SDL_JoystickCurrentPowerLevel") joystick_current_power_level :: proc(joystick: ^Joystick) -> Joystick_Power_Level ---;
	@(link_name="SDL_JoystickEventState") joystick_event_state :: proc(state: i32) -> i32 ---;
	@(link_name="SDL_JoystickFromInstanceID") joystick_from_instance_id :: proc(joystick_id: ^Joystick_Id) -> ^Joystick ---;
	@(link_name="SDL_JoystickGetAttached") joystick_get_attached :: proc(joystick: ^Joystick) -> Bool ---;
	@(link_name="SDL_JoystickGetAxis") joystick_get_axis :: proc(joystick: ^Joystick, axis: i32) -> i16 ---;
	@(link_name="SDL_JoystickGetBall") joystick_get_ball :: proc(joystick: ^Joystick, ball: i32, dx, dy: ^i32) -> i32 ---;
	@(link_name="SDL_JoystickGetButton") joystick_get_button :: proc(joystick: ^Joystick, button: i32) -> u8 ---;
	@(link_name="SDL_JoystickGetDeviceGUID") joystick_get_device_guid :: proc(device_index: i32) -> Joystick_Guid ---;
	@(link_name="SDL_JoystickGetGUID") joystick_get_guid :: proc(joystick: ^Joystick) -> Joystick_Guid ---;
	@(link_name="SDL_JoystickGetGUIDFromString") joystick_get_guid_from_string :: proc(pch_guid: cstring) -> Joystick_Guid ---;
	@(link_name="SDL_JoystickGetGUIDString") joystick_get_guid_string :: proc(guid: Joystick_Guid, psz_guid: ^u8, cb_guid: i32) ---;
	@(link_name="SDL_JoystickGetHat") joystick_get_hat :: proc(joystick: ^Joystick, hat: i32) -> u8 ---;
	@(link_name="SDL_JoystickInstanceID") joystick_instance_id :: proc(joystick: ^Joystick) -> Joystick_Id ---;
	@(link_name="SDL_JoystickIsHaptic") joystick_is_haptic :: proc(joystick: ^Joystick) -> i32 ---;
	@(link_name="SDL_JoystickName") joystick_name :: proc(joystick: ^Joystick) -> cstring ---;
	@(link_name="SDL_JoystickNameForIndex") joystick_name_for_index :: proc(device_index: i32) -> cstring ---;
	@(link_name="SDL_JoystickNumAxes") joystick_num_axes :: proc(joystick: ^Joystick) -> i32 ---;
	@(link_name="SDL_JoystickNumBalls") joystick_num_balls :: proc(joystick: ^Joystick) -> i32 ---;
	@(link_name="SDL_JoystickNumButtons") joystick_num_buttons :: proc(joystick: ^Joystick) ->	i32 ---;
	@(link_name="SDL_JoystickNumHats") joystick_num_hats :: proc(joystick: ^Joystick) -> i32 ---;
	@(link_name="SDL_JoystickOpen") joystick_open :: proc(device_index: i32) -> ^Joystick ---;
	@(link_name="SDL_JoystickUpdate") joystick_update :: proc() ---;
	@(link_name="SDL_LoadBMP_RW") load_bmp_rw :: proc(src: ^Rw_Ops, freerw: i32) -> ^Surface ---;
	@(link_name="SDL_LoadDollarTemplates") load_dollar_templates :: proc(touch_id: Touch_Id, src: ^Rw_Ops) -> i32 ---;
	@(link_name="SDL_LoadFunction") load_function :: proc(handle: rawptr, name: cstring) -> rawptr ---;
	@(link_name="SDL_LoadObject") load_object :: proc(sofile: cstring) -> cstring ---;
	@(link_name="SDL_LoadWAV_RW") load_wav_rw :: proc(src: ^Rw_Ops, freesrc: i32, spec: ^Audio_Spec, audio_buf: ^^u8, audio_len: ^u32) -> ^Audio_Spec ---;
	@(link_name="SDL_LockAudio") lock_audio :: proc() ---;
	@(link_name="SDL_LockAudioDevice") lock_audio_device :: proc(dev: Audio_Device_Id) ---;
	@(link_name="SDL_LockMutex") lock_mutex :: proc(mutex: ^Mutex) -> i32 ---;
	@(link_name="SDL_LockSurface") lock_surface :: proc(surface: ^Surface) -> i32 ---;
	@(link_name="SDL_LockTexture") lock_texture :: proc(texture: ^Texture, rect: ^Rect, pixels: ^rawptr, pitch: ^i32) -> i32 ---;
	@(link_name="SDL_Log") log :: proc(fmt: ..cstring) ---;
	@(link_name="SDL_LogCritical") log_critical :: proc(category: Log_Category, fmt: ..cstring) ---;
	@(link_name="SDL_LogDebug") log_debug :: proc(category: Log_Category, fmt: ..cstring) ---;
	@(link_name="SDL_LogError") log_error :: proc(category: Log_Category, fmt: ..cstring) ---;
	@(link_name="SDL_LogGetOutputFunction") log_get_output_function :: proc(callback: ^Log_Output_Function, userdata: ^rawptr) ---;
	@(link_name="SDL_LogGetPriority") log_get_priority :: proc(category: Log_Category) -> Log_Priority ---;
	@(link_name="SDL_LogInfo") log_info :: proc(category: Log_Category, fmt: ..cstring) ---;
	@(link_name="SDL_LogMessage") log_message :: proc(category: Log_Category, priority: Log_Priority, fmt: ..cstring) ---;
	@(link_name="SDL_LogMessageV") log_message_v :: proc(category: Log_Category, priority: Log_Priority, fmt: cstring, va_list: cstring) ---;
	@(link_name="SDL_LogResetPriorities") log_reset_priorities :: proc() ---;
	@(link_name="SDL_LogSetAllPriority") log_set_all_priority :: proc(priority: Log_Priority) ---;
	@(link_name="SDL_LogSetOutputFunction") log_set_output_function :: proc(callback: Log_Output_Function, userdata: rawptr) ---;
	@(link_name="SDL_LogSetPriority") log_set_priority :: proc(category: Log_Category, priority: Log_Priority) ---;
	@(link_name="SDL_LogVerbose") log_verbose :: proc(category: Log_Category, fmt: ..cstring) ---;
	@(link_name="SDL_LogWarn") log_warn :: proc(category: Log_Category, fmt: ..cstring) ---;
	@(link_name="SDL_LowerBlit") lower_blit :: proc(src: ^Surface, srcrect: ^Rect, dst: ^Surface, dstrect: ^Rect) -> i32 ---;
	@(link_name="SDL_LowerBlitScaled") lower_blit_scaled :: proc(src: ^Surface, srcrect: ^Rect, dst: ^Surface, dstrect: ^Rect) -> i32 ---;
	@(link_name="SDL_MapRGB") map_rgb :: proc(format: ^Pixel_Format, r, g, b: u8) -> u32 ---;
	@(link_name="SDL_MapRGBA") map_rgba :: proc(format: ^Pixel_Format, r, g, b, a: u8) -> u32 ---;
	@(link_name="SDL_MasksToPixelFormatEnum") masks_to_pixel_format_enum :: proc(bpp: i32, r_mask, g_mask, b_mask, a_mask: u32) -> u32 ---;
	@(link_name="SDL_MaximizeWindow") maximize_window :: proc(window: ^Window) ---;
	@(link_name="SDL_MinimizeWindow") minimize_window :: proc(window: ^Window) ---;
	@(link_name="SDL_MixAudio") mix_audio :: proc(dst, src: ^u8, len: u32, volume: i32) ---;
	@(link_name="SDL_MixAudioFormat") mix_audio_format :: proc(dst, src: ^u8, format: Audio_Format, len: u32, volume: i32) ---;
	@(link_name="SDL_MouseIsHaptic") mouse_is_haptic :: proc() -> i32 ---;
	@(link_name="SDL_NumHaptics") num_haptics :: proc() -> i32 ---;
	@(link_name="SDL_NumJoysticks") num_joysticks :: proc() -> i32 ---;
	@(link_name="SDL_OpenAudio") open_audio :: proc(desired, obtained: ^Audio_Spec) -> i32 ---;
	@(link_name="SDL_OpenAudioDevice") open_audio_device :: proc(device: cstring, iscapture: i32, desired, obtained: ^Audio_Spec, allowed_changed: i32) -> Audio_Device_Id ---;
	@(link_name="SDL_PauseAudio") pause_audio :: proc(pause_on: i32) ---;
	@(link_name="SDL_PauseAudioDevice") pause_audio_device :: proc(dev: Audio_Device_Id, pause_on: i32) ---;
	@(link_name="SDL_PeepEvents") peep_events :: proc(events: ^Event, num_events: i32, action: Event_Action, min_type, max_type: u32) -> i32 ---;
	@(link_name="SDL_PixelFormatEnumToMasks") pixel_format_enum_to_masks :: proc(format: u32, bpp: ^i32, r_mask, g_mask, b_mask, a_mask: ^u32) -> Bool ---;
	@(link_name="SDL_PollEvent") poll_event :: proc(event: ^Event) -> i32 ---;
	@(link_name="SDL_PumpEvents") pump_events :: proc() ---;
	@(link_name="SDL_PushEvent") push_event :: proc(event: ^Event) -> i32 ---;
	@(link_name="SDL_QueryTexture") query_texture :: proc(texture: ^Texture, format: ^u32, access, w, h: ^i32) -> i32 ---;
	@(link_name="SDL_QueueAudio") queue_audio :: proc(dev: Audio_Device_Id, data: rawptr, len: u32) -> i32 ---;
	@(link_name="SDL_Quit") quit :: proc() ---;
	@(link_name="SDL_QuitSubSystem") quit_sub_system :: proc(flags: u32) ---;
	@(link_name="SDL_RaiseWindow") raise_window :: proc(window: ^Window) ---;
	@(link_name="SDL_ReadBE16") read_be16 :: proc(src: ^Rw_Ops) -> u16 ---;
	@(link_name="SDL_ReadBE32") read_be32 :: proc(src: ^Rw_Ops) -> u32 ---;
	@(link_name="SDL_ReadBE64") read_be64 :: proc(src: ^Rw_Ops) -> u64 ---;
	@(link_name="SDL_ReadLE16") read_le16 :: proc(src: ^Rw_Ops) -> u16 ---;
	@(link_name="SDL_ReadLE32") read_le32 :: proc(src: ^Rw_Ops) -> u32 ---;
	@(link_name="SDL_ReadLE64") read_le64 :: proc(src: ^Rw_Ops) -> u64 ---;
	@(link_name="SDL_ReadU8") read_u8 :: proc(src: ^Rw_Ops) -> u8 ---;
	@(link_name="SDL_RecordGesture") record_gesture :: proc(touch_id: Touch_Id) -> i32 ---;
	@(link_name="SDL_RegisterApp") register_app :: proc(name: cstring, style: u32, h_inst: rawptr) -> i32 ---;
	@(link_name="SDL_RegisterEvents") register_events :: proc(num_events: i32) -> u32 ---;
	@(link_name="SDL_RemoveTimer") remove_timer :: proc(id: Timer_Id) -> Bool ---;
	@(link_name="SDL_RenderClear") render_clear :: proc(renderer: ^Renderer) -> i32 ---;
	@(link_name="SDL_RenderCopy") render_copy :: proc(renderer: ^Renderer, texture: ^Texture, srcrect, dstrect: ^Rect) -> i32 ---;
	@(link_name="SDL_RenderCopyEx") render_copy_ex :: proc(renderer: ^Renderer, texture: ^Texture, srcrect, dstrect: ^Rect, angle: f64, center: ^Point, flip: Renderer_Flip) -> i32 ---;
	@(link_name="SDL_RenderDrawLine") render_draw_line :: proc(renderer: ^Renderer, x1, y1, x2, y2: i32) -> i32 ---;
	@(link_name="SDL_RenderDrawLines") render_draw_lines :: proc(renderer: ^Renderer, points: ^Point, count: i32) -> i32 ---;
	@(link_name="SDL_RenderDrawPoint") render_draw_point :: proc(renderer: ^Renderer, x, y: i32) -> i32 ---;
	@(link_name="SDL_RenderDrawPoints") render_draw_points :: proc(renderer: ^Renderer, points: ^Point, count: i32) -> i32 ---;
	@(link_name="SDL_RenderDrawRect") render_draw_rect :: proc(renderer: ^Renderer, rect: ^Rect) -> i32 ---;
	@(link_name="SDL_RenderDrawRects") render_draw_rects :: proc(renderer: ^Renderer, rects: ^Rect, count: i32) -> i32 ---;
	@(link_name="SDL_RenderFillRect") render_fill_rect :: proc(dst: ^Renderer, rect: ^Rect) -> i32 ---;
	@(link_name="SDL_RenderFillRects") render_fill_rects :: proc(dst: ^Renderer, rect: ^Rect, count: i32) -> i32 ---;
	@(link_name="SDL_RenderGetClipRect") render_get_clip_rect :: proc(surface: ^Surface, rect: ^Rect) ---;
	@(link_name="SDL_RenderGetD3D9Device") render_get_d3d9_device :: proc(renderer: ^Renderer) ->	^IDirect3D_Device9 ---;
	@(link_name="SDL_RenderGetIntegerScale") render_get_integer_scale :: proc(renderer: ^Renderer) -> Bool ---;
	@(link_name="SDL_RenderGetLogicalSize") render_get_logical_size :: proc(renderer: ^Renderer, w, h: ^i32) ---;
	@(link_name="SDL_RenderGetScale") render_get_scale :: proc(renderer: ^Renderer, scale_x, scale_y: ^f32) ---;
	@(link_name="SDL_RenderGetViewport") render_get_viewport :: proc(renderer: ^Renderer, rect: ^Rect) ---;
	@(link_name="SDL_RenderIsClipEnabled") render_is_clip_enabled :: proc(renderer: ^Renderer) -> Bool ---;
	@(link_name="SDL_RenderPresent") render_present :: proc(renderer: ^Renderer) ---;
	@(link_name="SDL_RenderReadPixels") render_read_pixels :: proc(renderer: ^Renderer, rect: ^Rect, format: u32, pixels: rawptr, pitch: i32) -> i32 ---;
	@(link_name="SDL_RenderSetClipRect") render_set_clip_rect :: proc(surface: ^Surface, rect: ^Rect) -> Bool ---;
	@(link_name="SDL_RenderSetIntegerScale") render_set_integer_scale :: proc(renderer: ^Renderer, enable: Bool) -> i32 ---;
	@(link_name="SDL_RenderSetLogicalSize") render_set_logical_size :: proc(renderer: ^Renderer, w, h: i32) -> i32 ---;
	@(link_name="SDL_RenderSetScale") render_set_scale :: proc(renderer: ^Renderer, scale_x, scale_y: f32) -> i32 ---;
	@(link_name="SDL_RenderSetViewport") render_set_viewport :: proc(renderer: ^Renderer, rect: ^Rect) ---;
	@(link_name="SDL_RenderTargetSupported") render_target_supported :: proc(renderer: ^Renderer) -> Bool ---;
	@(link_name="SDL_ResetAssertionReport") reset_assertion_report :: proc() ---;
	@(link_name="SDL_RestoreWindow") restore_window :: proc(window: ^Window) ---;
	@(link_name="SDL_RWFromConstMem") rw_from_const_mem :: proc(mem: rawptr, size: i32) -> ^Rw_Ops ---;
	@(link_name="SDL_RWFromFP") rw_from_fp :: proc(fp: rawptr, auto_close: Bool) -> ^Rw_Ops ---;
	@(link_name="SDL_RWFromFile") rw_from_file :: proc(file: cstring, mode: cstring) -> ^Rw_Ops ---;
	@(link_name="SDL_RWFromMem") rw_from_mem :: proc(mem: rawptr, size:i32) -> ^Rw_Ops ---;
	@(link_name="SDL_RWsize") rw_size :: proc(ctx: ^Rw_Ops) -> int ---;
	@(link_name="SDL_SaveAllDollarTemplates") save_all_dollar_templates :: proc(dst: ^Rw_Ops) -> i32 ---;
	@(link_name="SDL_SaveBMP_RW") save_bmp_rw :: proc(surface: ^Surface, dst: ^Rw_Ops, free_dst: i32) -> i32 ---;
	@(link_name="SDL_SaveDollarTemplate") save_dollar_template :: proc(gesture_id: Gesture_Id, dst: ^Rw_Ops) -> i32 ---;
	@(link_name="SDL_SemPost") sem_post :: proc(sem: Sem) -> i32 ---;
	@(link_name="SDL_SemTryWait") sem_try_wait :: proc(sem: Sem) -> i32 ---;
	@(link_name="SDL_SemValue") sem_value :: proc(sem: Sem) -> u32 ---;
	@(link_name="SDL_SemWait") sem_wait :: proc(sem: Sem) -> i32 ---;
	@(link_name="SDL_SemWaitTimeout") sem_wait_timeout :: proc(sem: Sem, ms: u32) -> i32 ---;
	@(link_name="SDL_SetAssertionHandler") set_assertion_handler :: proc(handler: Assertion_Handler, userdata: rawptr) ---;
	@(link_name="SDL_SetClipRect") set_clip_rect :: proc(surface: ^Surface, rect: ^Rect) -> Bool ---;
	@(link_name="SDL_SetClipboardText") set_clipboard_text :: proc(text: cstring) -> i32 ---;
	@(link_name="SDL_SetColorKey") set_color_key :: proc(surface: ^Surface, flag: i32, key: u32) -> i32 ---;
	@(link_name="SDL_SetCursor") set_cursor :: proc(cursor: ^Cursor) ---;
	@(link_name="SDL_SetError") set_error :: proc(fmt: ..cstring) -> i32 ---;
	@(link_name="SDL_SetEventFilter") set_event_filter :: proc(filter: Event_Filter, userdata: rawptr) ---;
	@(link_name="SDL_SetHint") set_hint :: proc(name, value: cstring) -> Bool ---;
	@(link_name="SDL_SetHintWithPriority") set_hint_with_priority :: proc(name, value: cstring, priority: Hint_Priority) -> Bool ---;
	@(link_name="SDL_SetMainReady") set_main_ready :: proc() ---;
	@(link_name="SDL_SetModState") set_mod_state :: proc(modstate: Keymod) ---;
	@(link_name="SDL_SetPaletteColors") set_palette_colors :: proc(palette: ^Palette, colors: ^Color, firstcolor, ncolors: i32) -> i32 ---;
	@(link_name="SDL_SetPixelFormatPalette") set_pixel_format_palette :: proc(format: ^Pixel_Format, palette: ^Palette) -> i32 ---;
	@(link_name="SDL_SetRelativeMouseMode") set_relative_mouse_mode :: proc(enabled: Bool) -> i32 ---;
	@(link_name="SDL_SetRenderDrawBlendMode") set_render_draw_blend_mode :: proc(renderer: ^Renderer, blend_mode: Blend_Mode) -> i32 ---;
	@(link_name="SDL_SetRenderDrawColor") set_render_draw_color :: proc(renderer: ^Renderer, r, g, b, a: u8) -> i32 ---;
	@(link_name="SDL_SetRenderTarget") set_render_target :: proc(renderer: ^Renderer, texture: ^Texture) -> i32 ---;
	@(link_name="SDL_SetSurfaceAlphaMod") set_surface_alpha_mod :: proc(surface: ^Surface, alpha: u8) -> i32 ---;
	@(link_name="SDL_SetSurfaceBlendMode") set_surface_blend_mode :: proc(surface: ^Surface, blend_mode: Blend_Mode) -> i32 ---;
	@(link_name="SDL_SetSurfaceColorMod") set_surface_color_mod :: proc(surface: ^Surface, r, g, b: u8) -> i32 ---;
	@(link_name="SDL_SetSurfacePalette") set_surface_palette :: proc(surface: ^Surface, palette: ^Palette) -> i32 ---;
	@(link_name="SDL_SetSurfaceRLE") set_surface_rle :: proc(surface: ^Surface, flag: i32) -> i32 ---;
	@(link_name="SDL_SetTextInputRect") set_text_input_rect :: proc(rect: ^Rect) ---;
	@(link_name="SDL_SetTextureAlphaMod") set_texture_alpha_mod :: proc(texture: ^Texture, alpha: u8) -> i32 ---;
	@(link_name="SDL_SetTextureBlendMode") set_texture_blend_mode :: proc(texture: ^Texture, blend_mode: Blend_Mode) -> i32 ---;
	@(link_name="SDL_SetTextureColorMod") set_texture_color_mod :: proc(texture: ^Texture, r, g, b: u8) -> i32 ---;
	@(link_name="SDL_SetThreadPriority") set_thread_priority :: proc(priority: Thread_Priority) -> i32 ---;
	@(link_name="SDL_SetWindowBordered") set_window_bordered :: proc(window: ^Window, bordered: Bool) ---;
	@(link_name="SDL_SetWindowBrightness") set_window_brightness :: proc(window: ^Window, brightness: f32) -> i32 ---;
	@(link_name="SDL_SetWindowData") set_window_data :: proc(window: ^Window, name: cstring, userdata: rawptr) -> rawptr ---;
	@(link_name="SDL_SetWindowDisplayMode") set_window_display_mode :: proc(window: ^Window, mode: ^Display_Mode) -> i32 ---;
	@(link_name="SDL_SetWindowFullscreen") set_window_fullscreen :: proc(window: ^Window, flags: u32) -> i32 ---;
	@(link_name="SDL_SetWindowGammaRamp") set_window_gamma_ramp :: proc(window: ^Window, r, g, b: ^u16) -> i32 ---;
	@(link_name="SDL_SetWindowGrab") set_window_grab :: proc(window: ^Window, grabbed: Bool) ---;
	@(link_name="SDL_SetWindowHitTest") set_window_hit_test :: proc(window: ^Window, callback: Hit_Test, callback_data: rawptr) -> i32 ---;
	@(link_name="SDL_SetWindowIcon") set_window_icon :: proc(window: ^Window, icon: ^Surface) ---;
	@(link_name="SDL_SetWindowInputFocus") set_window_input_focus :: proc(window: ^Window) -> i32 ---;
	@(link_name="SDL_SetWindowMaximumSize") set_window_maximum_size :: proc(window: ^Window, w, h: i32) ---;
	@(link_name="SDL_SetWindowMinimumSize") set_window_minimum_size :: proc(window: ^Window, w, h: i32) ---;
	@(link_name="SDL_SetWindowModalFor") set_window_modal_for :: proc(window: ^Window, parent_window: ^Window) -> i32 ---;
	@(link_name="SDL_SetWindowOpacity") set_window_opacity :: proc(window: ^Window, opacity: f32) -> i32 ---;
	@(link_name="SDL_SetWindowPosition") set_window_position :: proc(window: ^Window, x, y: i32) ---;
	@(link_name="SDL_SetWindowResizable") set_window_resizable :: proc(window: ^Window, resizable: Bool) ---;
	@(link_name="SDL_SetWindowShape") set_window_shape :: proc(window: ^Window, shape: ^Surface, shape_mode: Window_Shape_Mode) -> i32 ---;
	@(link_name="SDL_SetWindowSize") set_window_size :: proc(window: ^Window, w, h: i32) ---;
	@(link_name="SDL_SetWindowTitle") set_window_title :: proc(window: ^Window, title: cstring) ---;
	@(link_name="SDL_SetWindowsMessageHook") set_windows_message_hook :: proc(callback: Windows_Message_Hook, userdata: rawptr) ---;
	@(link_name="SDL_ShowCursor") show_cursor :: proc(toggle: i32) -> i32 ---;
	@(link_name="SDL_ShowMessageBox") show_message_box :: proc(message_box_data: ^Message_Box_Data, button_id: ^i32) -> i32 ---;
	@(link_name="SDL_ShowSimpleMessageBox") show_simple_message_box :: proc(flags: u32, title, message: cstring, window: ^Window) -> i32 ---;
	@(link_name="SDL_ShowWindow") show_window :: proc(window: ^Window) ---;
	@(link_name="SDL_SoftStretch") soft_stretch :: proc(src: ^Surface, srcrect: ^Rect, dst: ^Surface, dstrect: ^Rect) -> i32 ---;
	@(link_name="SDL_StartTextInput") start_text_input :: proc() ---;
	@(link_name="SDL_StopTextInput") stop_text_input :: proc() ---;
	@(link_name="SDL_TLSCreate") tls_create :: proc() -> Tls_Id ---;
	@(link_name="SDL_TLSGet") tls_get :: proc(id: Tls_Id) -> rawptr ---;
	@(link_name="SDL_TLSSet") tls_set :: proc(id: Tls_Id, value: rawptr, destructor: proc(data: rawptr)) -> i32 ---;
	@(link_name="SDL_ThreadID") thread_id :: proc() -> Thread_Id ---;
	@(link_name="SDL_TryLockMutex") try_lock_mutex :: proc(mutex: ^Mutex) -> i32 ---;
	@(link_name="SDL_UnionRect") union_rect :: proc(a, b, result: ^Rect) ---;
	@(link_name="SDL_UnloadObject") unload_object :: proc(handle: rawptr) ---;
	@(link_name="SDL_UnlockAudio") unlock_audio :: proc() ---;
	@(link_name="SDL_UnlockAudioDevice") unlock_audio_device :: proc(dev: Audio_Device_Id) ---;
	@(link_name="SDL_UnlockMutex") unlock_mutex :: proc(mutex: ^Mutex) -> i32 ---;
	@(link_name="SDL_UnlockSurface") unlock_surface :: proc(surface: ^Surface) ---;
	@(link_name="SDL_UnlockTexture") unlock_texture :: proc(texture: ^Texture) ---;
	@(link_name="SDL_UnregisterApp") unregister_app :: proc() ---;
	@(link_name="SDL_UpdateTexture") update_texture :: proc(texture: ^Texture, rect: ^Rect, pixels: rawptr, pitch: i32) ---;
	@(link_name="SDL_UpdateWindowSurface") update_window_surface :: proc(window: ^Window) -> i32 ---;
	@(link_name="SDL_UpdateWindowSurfaceRects") update_window_surface_rects :: proc(window: ^Window, rects: ^Rect, num_rects: i32) -> i32 ---;
	@(link_name="SDL_UpdateYUVTexture") update_yuv_texture :: proc(texture: ^Texture, rect: ^Rect, y_plane: ^u8, y_pitch: i32, u_plane: ^u8, u_pitch: i32, v_plane: ^u8, v_pitch: i32) -> i32 ---;
	@(link_name="SDL_UpperBlit") upper_blit :: proc(src: ^Surface, srcrect: ^Rect, dst: ^Surface, dstrect: ^Rect) -> i32 ---;
	@(link_name="SDL_UpperBlitScaled") upper_blit_scaled :: proc(src: ^Surface, srcrect: ^Rect, dst: ^Surface, dstrect: ^Rect) -> i32 ---;
	@(link_name="SDL_VideoInit") video_init :: proc(driver_name: cstring) -> i32 ---;
	@(link_name="SDL_VideoQuit") video_quit :: proc() ---;
	@(link_name="SDL_WaitEvent") wait_event :: proc(event: ^Event) -> i32 ---;
	@(link_name="SDL_WaitEventTimeout") wait_event_timeout :: proc(event: ^Event, timeout: i32) -> i32 ---;
	@(link_name="SDL_WaitThread") wait_thread :: proc(thread: ^Thread, status: ^i32) ---;
	@(link_name="SDL_WarpMouseGlobal") warp_mouse_global :: proc(x, y: i32) -> i32 ---;
	@(link_name="SDL_WarpMouseInWindow") warp_mouse_in_window :: proc(window: ^Window, x, y: i32) ---;
	@(link_name="SDL_WasInit") was_init :: proc(flags: u32) -> u32 ---;
	@(link_name="SDL_WriteBE16") write_be16 :: proc(dst: ^Rw_Ops, value: u16) -> u64 ---;
	@(link_name="SDL_WriteBE32") write_be32 :: proc(dst: ^Rw_Ops, value: u32) -> u64 ---;
	@(link_name="SDL_WriteBE64") write_be64 :: proc(dst: ^Rw_Ops, value: u64) -> u64 ---;
	@(link_name="SDL_WriteLE16") write_le16 :: proc(dst: ^Rw_Ops, value: u16) -> u64 ---;
	@(link_name="SDL_WriteLE32") write_le32 :: proc(dst: ^Rw_Ops, value: u32) -> u64 ---;
	@(link_name="SDL_WriteLE64") write_le64 :: proc(dst: ^Rw_Ops, value: u64) -> u64 ---;
	@(link_name="SDL_WriteU8") write_u8 :: proc(dst: ^Rw_Ops, value: u8) -> u64 ---;
}

